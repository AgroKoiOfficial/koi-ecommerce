generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  password     String
  resetToken   String?
  deleteToken  String?
  refreshToken String?
  role         Role

  cart      Cart[]
  address   Address[]
  reviews   Review[]
  payments  Payment[]
  checkouts Checkout[]

  createdAt DateTime @default(now())

  @@map("users")
}

model Category {
  id   String @id @default(cuid())
  name String

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  slug        String?  @unique
  name        String
  image       String?
  video       String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int
  description String   @db.Text
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())

  carts   Cart[]
  reviews Review[]

  @@map("products")
}

model Cart {
  id        String   @id @default(cuid())
  productId String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  total     Decimal  @db.Decimal(10, 2)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  product   Product  @relation(fields: [productId], references: [id])

  @@map("carts")
}

model Address {
  id         String     @id @default(cuid())
  phone      String
  city       String
  postalCode String
  province   String
  street     String
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  checkouts  Checkout[]

  @@map("addresses")
}

model Shipping {
  id     String  @id @default(cuid())
  city   String
  region String
  fee    Decimal @db.Decimal(10, 2)

  checkout Checkout[]

  @@map("shippings")
}

model Review {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  rating    Int
  comment   String

  @@map("reviews")
}

model Checkout {
  id                  String        @id @default(cuid())
  userId              String
  user                User          @relation(fields: [userId], references: [id])
  addressId           String
  address             Address       @relation(fields: [addressId], references: [id])
  shippingId          String
  shipping            Shipping?     @relation(fields: [shippingId], references: [id])
  cart                Json
  total               Int
  quantity            Int
  couponId            String?
  coupon              Coupon?       @relation(fields: [couponId], references: [id])
  adminWhatsAppNumber String?
  redirectUrl         String?
  payments            Payment[]
  status              PaymentStatus
  createdAt           DateTime      @default(now())

  @@map("checkouts")
}

model Payment {
  id         String        @id @default(cuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  checkoutId String
  checkout   Checkout      @relation(fields: [checkoutId], references: [id])
  total      Decimal
  quantity   Int
  status     PaymentStatus

  @@map("payments")
}

model Coupon {
  id           String       @id @default(cuid())
  code         String
  minimumPrice Decimal?     @db.Decimal(10, 2)
  decimalValue Decimal?     @db.Decimal(10, 2)
  percentValue Decimal?     @db.Decimal(5, 2)
  expiration   DateTime
  discountType DiscountType

  checkouts Checkout[]

  @@map("coupons")
}

model Carousel {
  id    String  @id @default(cuid())
  image String?
  title String?
  color String? @default("white")
}

model CustomerService {
  id           String    @id @default(cuid())
  name         String
  phoneNumber  String
  active       Boolean   @default(false)
  message      String
  lastAccessed DateTime? @updatedAt
}

model FAQ {
  id        String   @id @default(cuid())
  slug      String   @unique
  question  String
  category  String
  answer    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model PostsCategory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Posts[]

  @@map("posts_categories")
}

model Posts {
  id         String        @id @default(cuid())
  slug       String        @unique
  title      String
  author     String
  image      String?
  categoryId String
  category   PostsCategory @relation(fields: [categoryId], references: [id])
  content    String        @db.Text
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("posts")
}

model About {
  id        String   @id @default(cuid())
  title     String
  image     String?
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("abouts")
}

model CompanyContact {
  id        String   @id @default(cuid())
  address   String
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_contacts")
}

model Contact {
  id           String   @id @default(cuid())
  name         String
  emailOrPhone String
  subject      String
  message      String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("contacts")
}

model TermCondition {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("term_conditions")
}

model Webhook {
  id         String   @id
  receivedAt DateTime
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PAID
  UNPAID
  EXPIRED
  FAILED
}

enum DiscountType {
  DECIMAL
  PERCENT
}
